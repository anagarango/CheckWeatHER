import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import { useState, useEffect } from 'react'
import axios from 'axios'
import { Container, Heading, Image } from '@/styles/global'
import Lottie from "lottie-react";
import LoadingAnimation from '../public/loading.json'


export default function Home({apiKey}) {
  const [location, setLocation] = useState("")
  const [data, setData] = useState()
  const [errorMessage, setErrorMessage] = useState()
  const [weatherDes, setWeatherDes] = useState("")
  const [hourlyForecast, setHourlyForecast] = useState()
  const [dailyForecast, setDailyForecast] = useState()
  const [loading, setLoading] = useState(false)
  const [start, setStart] = useState(true)
  const [header, setHeader] = useState(false);

  var lang = "en"
  var units = "metric"
  const url = `https://api.openweathermap.org/data/2.5/weather?q=${location}&units=${units}&appid=${apiKey}&lang=${lang}`
  const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${location}&units=${units}&appid=${apiKey}&lang=${lang}`

  const searchLocation = (event) => {
    if(event.key == "Enter"){
      axios.get(url)
        .then((response) => {
          setErrorMessage("")
          setData()
          setDailyForecast()
          setHourlyForecast()
          console.clear();
          console.log([response.data])
          setLoading(true);
          setStart(false)
          setTimeout(() => {
              setLoading(false)
              setData([response.data]);
          }, 1500);

      axios.get(forecastUrl)
        .then((response) => {

          
          setStart(false)
          var hours24 = []
          var days8 = []
          for(var i = 2; i < 8; i++){
            hours24.push(response.data.list[i])
          }
          for(var i = 0; i < response.data.list.length ; i++){
            const date = new Date(response.data.list[i].dt_txt)
            if(i == 0){
              days8.push(response.data.list[i])
            } else if(date.toLocaleTimeString('en-US') == "12:00:00 AM"){
              days8.push(response.data.list[i])
            }
          }
          setTimeout(() => {
            setHourlyForecast(hours24)
            setDailyForecast(days8)
        }, 1500);
          
        })

      function weatherDescription(){
        const words = response.data.weather[0].description.split(" ");
        let forEach = ""
        let result = ""
        for (var i = 0; i < words.length; i++) {
          forEach = words[i].charAt(0).toUpperCase()+ words[i].slice(1);
          result += `${forEach} `
        }
        return result
      }

        setTimeout(() => {
          setWeatherDes(weatherDescription)
        }, 1500);
      
        })
        .catch((error) => {
          console.log(error)
          setErrorMessage("")
          setData()
          setDailyForecast()
          setHourlyForecast()
          setLoading(true);
          setStart(false)
          setTimeout(() => {
            setLoading(false)
            setErrorMessage("Please enter another location")
          }, 700);
          
        })

      setLocation('')
    }
  }

  function Reset(){
    setLoading(true);
    setLocation("")
    setData()
    setErrorMessage()
    setWeatherDes("")
    setHourlyForecast()
    setDailyForecast()
    setTimeout(() => {
      setStart(true)
      setLoading(false)
    }, 1000);
    
  }

  useEffect(()=>{
    if (typeof window !== "undefined") {
      window.addEventListener("scroll", () =>{
        if(window.innerWidth >= 760){
          if(window.pageYOffset > 550){
            setHeader(true)
          } else {
            setHeader(false)
          }
        }
        if(window.innerWidth <= 760){
          if(window.pageYOffset > 200){
            setHeader(true)
          } else {
            setHeader(false)
          }
        }
      });
    }
  },[])
  return (
    <>
      <Head>
        <title>Check Weat-HER - Ana Arango</title>
        <meta name="description" content="Weather app generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/logo.svg" />
      </Head>

      <main className={styles.main}>
        <Container bgColor={header ? "white" : "transparent"} height="fit-content" flexDir="row" justCont="space-between" padding="1.5% 6%" position="fixed" top="0">
          <Container cursor="pointer" flexDir="row" width="fit-content" onClick={()=>Reset()}>
            <Image src='/logo.svg' width={150} height={70} />
            <Heading color="#DD6B1D" fSize="25px" fontWeight="900" fontFamily="'Yeseva One', cursive">Check Weat-HER</Heading>
          </Container>
          
          <input className='weatherInput' value={location} onChange={event => setLocation(event.target.value)} placeholder="Enter Location" onKeyDown={searchLocation} type="text" />
        </Container>
        {
          start && <Container position="absolute" top="42vh">
             <Heading fSize="20px" fWeight="600" padding="0 0 15px 0">When You Don't Know The Weather, Ask HER!</Heading>  
             <Heading fSize="20px" fWeight="400">1. Enter a Location</Heading>  
             <Heading fSize="20px" fWeight="400">2. Find the City's Current Weather, Tomorrow's Forecast, and 6-Day Forecast</Heading>  
          </Container>
        }
       
        <Heading fSize="18px" position="absolute" top="45%">{errorMessage}</Heading>
        {loading && <Lottie style={{height:400, width:400, position:"absolute", top:"25%"}} animationData={LoadingAnimation} loop={true}></Lottie>}
        

        {
          data && data.map((w, index) => {
            return (
              <Container key={index}>

                <Container flexDir="row" minWidth="100vw" url={`/FullIcons/${w.weather[0].main}.svg`} justCont="space-between" margin="0 0 -10px 0">
                  <Container width="35%" padding="20.5% 2%">
                    <Heading fWeight="600" fSize="30px" fontFamily="'Yeseva One', cursive">{w.name}</Heading>
                    <Heading fWeight="400" fSize="18px">{new Intl.DisplayNames(['en'],{type: 'region'}).of(w.sys.country)}</Heading>
                    <Heading fWeight="300" fSize="16px" padding="10px 0" color="#666666">Last Updated: {new Date().toLocaleDateString("default", { year: 'numeric', month: 'short', day: 'numeric' })}</Heading>
                  </Container>
                  <Container width="35%" padding="20.5% 20px">
                    <Heading fSize="30px" padding="10px 0">{Number(w.main.temp).toFixed()}˚C</Heading>
                    <Heading fWeight="400" fSize="18px" color="#666666">{weatherDes}</Heading>
                  </Container>
                </Container>

                <Container flexDir="column" bgColor="#EBEBEB" width="90vw" padding="20px" bRadius="15px">
                  <Heading fSize="18px" width="100%" color="#666666" padding="0 0 20px 0">Air Conditions</Heading>
                  <Container flexDir="row" width="100%">
                    <Container width="50%">
                      <Heading fSize="16px" color="#666666" fWeight="500">Feels Like</Heading>
                      <Heading fSize="35px">{Number(w.main.feels_like).toFixed()}˚C</Heading>
                    </Container>
                    {
                      w.wind.gust && <Container width="50%">
                      <Heading fSize="16px" color="#666666" fWeight="500">Wind Gust</Heading>
                      <Heading fSize="35px">{w.wind.gust}m/s</Heading>
                    </Container>
                    }
                  </Container>
                </Container>

              </Container>
            )
          })
        }
        {
          hourlyForecast && <Container bgColor="#EBEBEB" width="90vw" padding="20px" bRadius="15px" margin="20px 0 0 0 ">
          <Heading fSize="18px" width="100%" color="#666666" padding="0 0 20px 0">Tomorrow's Forecast</Heading>
          <Container flexDir="row">
          {
            hourlyForecast.map((f, index) => {
                return (
                  <Container className="hourly" key={index} width="14%" padding="0 3%">
                      <Heading fSize="16px" color="#666666">{new Date(f.dt_txt).toLocaleTimeString(navigator.language, {hour: '2-digit'})}</Heading>
                      <Image src={`/Icons/${f.weather[0].main}.svg`} width="80%" padding="25% 0"/>
                      <Heading fSize="16px">{Number(f.main.temp).toFixed(0)}˚C</Heading>
                  </Container>
                )
              })
            }
          </Container>
        </Container>
        }

        {
          dailyForecast && <Container bgColor="#EBEBEB" width="90vw" padding="20px" bRadius="15px" margin="20px 0 0 0 " marginBottom="calc(8% + 100px)">
          <Heading fSize="18px" width="100%" color="#666666">6-Day Forecast</Heading>
          <Container>
          {
            dailyForecast.map((f, index) => {
                return (
                  <Container key={index} className="daily" width="75%" flexDir="row" justCont="space-between" borderBottom="1px solid #CCCCCC" padding="1%" height="fit-content">
                      <Heading width="10%" fSize="16px" color="#666666" >{new Date(f.dt_txt).toLocaleString("default", { weekday: "short" })}</Heading>
                      <Image src={`/Icons/${f.weather[0].main}.svg`} width="25%" margin="-5%" padding="8%"/>
                      <Heading padding="0% 2%" fSize="16px" width="15%">{Number(f.main.temp).toFixed(1)}˚C</Heading>
                      <Heading padding="0% 2%" fSize="16px" width="15%">{f.weather[0].main}</Heading>
                      <Heading padding="0% 2%" fSize="16px" width="25%">{Math.floor(f.pop.toFixed(2) * 100)}% Chance of Precipitation</Heading>
                  </Container>
                )
              })
            }
          </Container>
        </Container>
        }
        
        <Container bgColor="#EBEBEB" height="fit-content" justCont="space-between" padding="2% 0" position="absolute" bottom="0">
          <Heading color="#DD6B1D" fSize="25px" fontFamily="'Yeseva One', cursive">Created by Ana Arango 🤪</Heading>
          <Heading fSize="16px" fWeight="400">© 2022 - {new Date().getFullYear()} - Check Weat-HER</Heading>  
        </Container>
      </main>
    </>
  )
}


export async function getServerSideProps(){

  const api_key = process.env.API_KEY

  return {
    props: {
      apiKey: api_key
    }
  }
}